using CourseManagementAPI.AutoGeneratedModel;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace CourseManagementAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class CourseController : ControllerBase
    {
        private readonly AzureContext _context;
        private readonly ILogger<CourseController> _logger;

        public CourseController(AzureContext context, ILogger<CourseController> logger)
        {
            _context = context;
            _logger = logger;
        }

        [HttpGet]
        public async Task<IEnumerable<Course>> GetAllAsync()
        {
            var courses = await _context.Courses.ToListAsync().ConfigureAwait(false);
            if(courses == null || courses.Count == 0)
            {
                _logger.LogError("No course information available");
            }

            return courses;
        }

        [HttpGet("{id}")]
        public async Task<Course> GetAsync(int id)
        {
            var course = await _context.Courses.FindAsync(id);
            if(course is null)
            {
                _logger.LogError("Cannot find course with " + id);
            }
            return course;
        }

        [HttpPut]
        public async Task PutAsync(Course course)
        {
            _context.Update(course);
            await _context.SaveChangesAsync();
        }

        [HttpDelete("{id}")]
        public async Task DeleteAsync(int id)
        {
            _context.Courses.Remove(_context.Courses.Find(id));
            await _context.SaveChangesAsync();
        }
    }
}
